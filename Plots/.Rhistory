install.packages("RMySQL")
library(swirl)
swirl()
quit
swirl(quit)
install.packages("installr")
install.packages(c("dplyr", "MASS", "Matrix", "plyr", "scales", "survival", "vcd"))
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:datasets", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
# installing/loading the latest installr package:
install.packages("installr"); library(installr) #load / install+load installr
install.packages("installr");
install.packages("dplyr")
install.packages("ggplot2")
install.packages("rtools")
install.packages("RMySQL")
install.packages("XLConnect")
install.packages("foreign")
install.packages("tidlyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("car")
install.packages("vcd")
install.packages("gimnet")
install.packages("survival")
install.packages("caret")
install.packages("R Markdown")
install.packages("xtable")
install.packages("data.table")
install.packages("manipulate")
install.packages("markdown")
install.packages("R Markdown")
install.packages("gtable")
install.packages("bootstrap")
install.packages("swirl")
install.packages("jackknife")
install.packages("readr")
install.packages("readxl")
install.packages("haven")
install.packages("installr")
install.packages("knitr")
install.packages("pwr")
install.packages("googlesheets")
install.packages("mi")
install.packages("ctv")
install.packages("matrixStats")
install.packages("UsingR")
install.packages("VIF")
install.packages("purrr")
install.packages("rmarkdown")
install.packages(c("chron", "class", "crayon", "curl", "httr", "jsonlite", "lme4", "MASS", "mime", "nlme", "nnet", "quantreg", "R6", "Rcpp", "RcppEigen", "RCurl", "rJava", "scales", "SparseM", "spatial", "stringi"))
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price),)
g = g + xlab("Mass(carats)")
g = g + ylab("Price (in $)")
g = g + geom_point(size = 6, colour = "black", alpha= 0.2 )
g = g + geom_point( size = 5, colour = "blue", alpha= 0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
fit <- lm(price ~ carat, data = diamond)
coef(fit)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit2 <- lm(price ~ I(carat - mean(carat), data = diamond)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
fit3<- lm(price ~ I(carat*10), data = diamond)
coef(fit3)
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2]* newx
predict(fit, newdata = data.frame(carat = newx))
library(swirl)
swirl()
lm(Fertility ~ ., data = swiss)
all <- lm(Fertility ~ ., data = swiss)
summary(all)
lm(Fertility ~ agriculture)
lm(Fertility ~ agriculture, data = swiss)
lm(Fertility ~ Agriculture, data = swiss)
summary(lm(Fertility ~ Agriculture, data = swiss))
cor(Examination, Education, data = swiss)
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
?makelms
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, data = swiss)
coef(efit - all)
coef(efit) - coef(all)
all$coefficients - efit$coefficients
library(swirl)
swirl()
detach("package:swirl", unload=TRUE)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library
library(dplyr)
package_version("dplyr")
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package =="swirl")
filter(cran, r_version == "3.1.1",country == "US")
?Comparison
filter(cran, r_version <= "3.0.2",country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size> 100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, country, desc(r_version), ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran,ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47,0.51,0.73,0.36,0.58,0.57,0.85,0.44,0.42)
y <- c(1.39,0.72,1.55,0.48,1.19,-1.59,1.23,-0.65,1.49,0.05)
regr_line <- lm(y~x + 0)
coef(regr_line)
data(mtcars)
head(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
regr_line <- lm(y~x)
coef(regr_line)
slope <- .5*1/.5
slope
n_quiz1 <- 1.5
n_quiz2 <- 0.4 * n_quiz1
n_quiz2
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m <- mean(x)
s <- sd(x)
ans <- (8.58- m)/s
ans
x <- c(0.8, 0.47,0.51,0.73,0.36,0.58,0.57,0.85,0.44,0.42)
y <- c(1.39,0.72,1.55,0.48,1.19,-1.59,1.23,-0.65,1.49,0.05)
regr_line <- lm(y~x)
coef(regr_line)
mean(x)
?require
library(datasets); data(swiss)
require(dplyr)
swiss = mutate(swiss, CatholicBin = 1 * (Catholic > 50))
fit <- lm(Fertility ~ Agriculture + factor(CatholicBin), data = swiss)
library(swirl)
swirl()
lm(child ~ parent, data = galton)
fit <- lm(formula = child ~ parent, data = galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coefficients[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(rhs, lhs)
varChild <- var(children, galton)
varChild <- var(child, galton)
varChild <- var(fit)
?var
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varRes, varEst)
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
efit$residuals
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(dplyr)
library(data.table)
col_names <- colnames(uci_final)
data("mtcars")
mtcars$cyl <- factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am)
levels(mtcars$am) <- c('-auto','-manual')
fit <- lm(mpg ~ cyl + wt, mtcars)
summary(fit)$coef[3,1]
install.packages("packrat")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
destFile <- tempfile()
download.file(fileURL, destFile, method = "curl")
data <- read.csv(destFile, header = T)
## ACR == 3 - lot size of 10 or more acres
## AGS == 6 - $10000+ of Sales of Agricultural sales
## Creating logical vector
agricultureLogical <- with(data, ACR == 3 & AGS ==6)
## first 3 values of which on that vector
which(agricultureLogical)[1:3]
### ANSWER 1. [1] 125 238 262
### QUESTION 2. Use the parameter native=TRUE to read img file with jpeg package. What are the 30th and 80th quantiles of the resulting data? (some Linux systems may produce an answer 638 different for the 30th quantile)
library(jpeg)
install.packages("jpeg")
library(jpeg)
imgURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
imgFile <- tempfile()
download.file(imgURL, imgFile, method = "curl")
## Read file
img <- readJPEG(imgFile, native = TRUE)
## Get quantiles at 30% and 80%
quantile(img, probs = c(0.3, 0.8))
gdpURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
eduURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
gdpFile <- tempfile()
eduFile <- tempfile()
download.file(gdpURL, gdpFile, method = "curl")
download.file(eduURL, eduFile, method = "curl")
## Read 190 ranked countries
gdpData <- read.csv(gdpFile, skip = 5, nrows = 190, stringsAsFactors = F, header = F)
eduData <- read.csv(eduFile, stringsAsFactors = F)
## Subset only needed data, name columns in gdpData and convert GDP Value to numeric
gdpData <- gdpData[, c(1, 2, 4, 5)]
colnames(gdpData) <- c("CountryCode", "Rank", "Country.Name", "GDP.Value")
gdpData$GDP.Value <- as.numeric(gsub(",", "", gdpData$GDP.Value))
## Merge data by country codes
matchedData <- merge(gdpData, eduData, by.x = "CountryCode", by.y = "CountryCode")
## Number of matched countries
dim(matchedData)[1]
data("mtcars")
names(mtcars) <- c( "MPG", "cylinders","displace", "horsepower", "axratio", "weight", "quarttime", "vs", "transtype", "gears", "ncarbs")
mtcars$transtype <- factor(mtcars$transtype)
mtcars$cylinders <- factor(mtcars$cylinders)
mtcars$gears <- factor(mtcars$gears)
levels(mtcars$transtype) <- c("automatic", "manual")
shapiro.test(mtcars$MPG)
t.test(mtcars$MPG ~ mtcars$transtype)
### Models
fit <- lm(MPG ~ mtcars$transtype, data = mtcars)
summary(fit)
fitfull <- lm(MPG ~ ., data = mtcars)
fitreduct <- step(fitfull, direction = "backward", k = 2, trace = 0)
fitiact <- lm(MPG ~ weight + quarttime + transtype + weight*transtype, data = mtcars)
summary(fitreduct)
summary(fitiact)
anova(fitreduct, fitiact)
suppressMessages(library(lmtest))
summary(fitreduct)$adj.r.squared
summary(fitiact)$adj.r.squared
lrtest(fitreduct,fitiact)
library(car)
vif(fitreduct)
vif(fitiact)
``` {r, message=FALSE}
install.packages(c("caret", "coda", "foreach", "HistData", "iterators", "lme4", "matrixStats", "mgcv", "packrat", "readr", "rmarkdown", "RMySQL", "stringi", "testthat"))
library(RMySQL)
ucscDB <- dbConnect(MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB, "show databases;"); dbDisconnect(ucscDB);
result
x <- c(140, 138, 150, 148, 135)
y <- c(132, 135, 151, 146, 130)
t.test(x, y, paired = TRUE)
1100 + c(-1,1)*qt(0.975,8)*30/sqrt(9)
pbinom(3, 5,.5) - pbinom(2,5,.5)
ppois(10, 1787*1/100)
se <- sqrt((8*1.5^2+8*1.8^2)/16*(1/9+1/9))
z <- (-3 + 1)/se
pvalue <- pnorm(z)*2
pvalue
power.t.test(n = 100, delta = .01-0, sd = .04, type = "one.sample", alternative = "one.sided")$power
power.t.test(power = .9, delta = .01-0, sd = .04, type = "one.sample", alternative = "one.sided")$n
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
library(swirl)
swirl()
(10+1)/36
1-(2+1)/36
deck
4/52
52
4/52
0
12/52
2/52
2/50
2/12
2/51
library(swirl)
swirl()
dice_sqr
ex2_fair <- dice_sqr*dice_high
ex2_fair <- sum(dice_fair* dice_sqr)
install.packages("devtools")
devtools::install_github("ismayc/rticles")
install.packages("rio")
install.packages("psych")
install.packages("sqldf")
install.packages("quantmod")
install.packages("rvest")
install.packages("reshape2")
install.packages("zoo")
install.packages("editR")
install.packages("DT")
install.packages("googleVis")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("plotly")
install.packages("RColorBrewer")
install.packages("plotly")
install.packages("leaflet")
install.packages("rga")
install.packages("RGA")
install.packages("RSiteCatalyst")
install.packages("roxygen2")
install.packages("openxlsx")
wage_data <- read.csv("~/OneDrive/Coursera/Classes/Econometrics/Quiz2_environ/Dataset2.csv", stringsAsFactors=FALSE)
attach(wage_data)
library(dplyr)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
install.packages(c("ggplot2", "Hmisc", "matrixStats", "mgcv", "plotly", "RcppArmadillo", "rmarkdown"))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
View(cachemean)
View(cachemean)
## Part 2
6*28.50
setwd("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1")
hhpc_data <- read.csv("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1/household_power_consumption.txt", sep=";")
View(hhpc_data)
finalData <- hhpc_data[hhpc_data$Date %in% c("1/2/2007","2/2/2007"),]
settime <-strptime(paste(finalData$Date, finalData$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
finalData <- cbind(SetTime, finalData)
finalData <- cbind(settime, finalData)
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
View(finalData)
setwd("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1")
hhpc_data <- read.csv("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1/household_power_consumption.txt", sep=";", na.strings="\x0C?\"")
View(hhpc_data)
hhpc_data <- read.csv("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1/household_power_consumption.txt", sep=";")
finalData <- hhpc_data[hhpc_data$Date %in% c("1/2/2007","2/2/2007"),]
settime <-strptime(paste(finalData$Date, finalData$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
finalData <- cbind(settime, finalData)
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
setwd("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1")
hhpc_data <- read.csv("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1/household_power_consumption.txt", sep=";", na.strings="?", stringsAsFactors=FALSE)
View(hhpc_data)
finalData <- hhpc_data[hhpc_data$Date %in% c("1/2/2007","2/2/2007"),]
settime <-strptime(paste(finalData$Date, finalData$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
finalData <- cbind(settime, finalData)
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
setwd("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1")
household_power_consumption <- read.csv("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1/household_power_consumption.txt", sep=";", na.strings="?")
View(household_power_consumption)
hhpc_data <- read.csv("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1/household_power_consumption.txt", sep=";", na.strings="?")
View(hhpc_data)
finalData <- hhpc_data[hhpc_data$Date %in% c("1/2/2007","2/2/2007"),]
settime <-strptime(paste(finalData$Date, finalData$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
finalData <- cbind(settime, finalData)
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
png(filename='plots/plot2.png',width=480,height=480,units='px')
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
plot(finalData$DateTime,finalData$GlobalActivePower,ylab='Global Active Power (kilowatts)', xlab='', type='l')
plot(finalData$SetTime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
columnlines <- c("black", "red", "blue")
labels <- c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(finalData$SetTime, finalData$Sub_metering_1, type="l", col=columnlines[1], xlab="", ylab="Energy sub metering")
lines(finalData$SetTime, finalData$Sub_metering_2, col=columnlines[2])
lines(finalData$SetTime, finalData$Sub_metering_3, col=columnlines[3])
legend("topright", legend=labels, col=columnlines, lty="solid")
plot(finalData$settime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
quartz()
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
plot(finalData$settime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
columnlines <- c("black", "red", "blue")
labels <- c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(finalData$settime, finalData$Sub_metering_1, type="l", col=columnlines[1], xlab="", ylab="Energy sub metering")
lines(finalData$settime, finalData$Sub_metering_2, col=columnlines[2])
lines(finalData$settime, finalData$Sub_metering_3, col=columnlines[3])
legend("topright", legend=labels, col=columnlines, lty="solid")
plot(finalData$settime, finalData$Global_active_power, type="l", col="green", xlab="", ylab="Global Active Power")
plot(finalData$settime, finalData$Voltage, type="l", col="orange", xlab="datetime", ylab="Voltage")
plot(finalData$settime, finalData$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(finalData$settime, finalData$Sub_metering_2, type="l", col="red")
lines(finalData$settime, finalData$Sub_metering_3, type="l", col="blue")
legend("topright", bty="n", legend=labels, lty=1, col=columnlines)
plot(finalData$settime, finalData$Global_reactive_power, type="l", col="blue", xlab="datetime", ylab="Global_reactive_power")
setwd("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1")
hhpc_data <- read.csv("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1/household_power_consumption.txt", sep=";", na.strings="?")
finalData <- hhpc_data[hhpc_data$Date %in% c("1/2/2007","2/2/2007"),]
settime <-strptime(paste(finalData$Date, finalData$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
finalData <- cbind(settime, finalData)
quartz()
## Plot 1
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
## Plot 2
plot(finalData$settime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
columnlines <- c("black", "red", "blue")
labels <- c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
## Plot 3
plot(finalData$settime, finalData$Sub_metering_1, type="l", col=columnlines[1], xlab="", ylab="Energy sub metering")
lines(finalData$settime, finalData$Sub_metering_2, col=columnlines[2])
lines(finalData$settime, finalData$Sub_metering_3, col=columnlines[3])
legend("topright", legend=labels, col=columnlines, lty="solid")
labels <- c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
columnlines <- c("black","red","blue")
par(mfrow=c(2,2))
##Plot 4
plot(finalData$settime, finalData$Global_active_power, type="l", col="green", xlab="", ylab="Global Active Power")
plot(finalData$settime, finalData$Voltage, type="l", col="orange", xlab="datetime", ylab="Voltage")
plot(finalData$settime, finalData$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(finalData$settime, finalData$Sub_metering_2, type="l", col="red")
lines(finalData$settime, finalData$Sub_metering_3, type="l", col="blue")
legend("topright", bty="n", legend=labels, lty=1, col=columnlines)
plot(finalData$settime, finalData$Global_reactive_power, type="l", col="blue", xlab="datetime", ylab="Global_reactive_power")
downloadURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
downloadFile <- "./Data/household_power_consumption.zip"
householdFile <- "./Data/household_power_consumption.txt"
##
if (!file.exists(householdFile)) {
download.file(downloadURL, downloadFile, method = "curl")
unzip(downloadFile, overwrite = T, exdir = "./Data")
}
hhpc_data <- read.csv("~/OneDrive/Education/Coursera/Classes/Exploratory Data Analysis/Assignment 1/household_power_consumption.txt", sep=";", na.strings="?")
setwd("~/GitHub/ExData_Plotting1/Plots")
png(filename = ~Plot1/GitHub/ExData_Plotting1/Plots")
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
hist(finalData$Global_active_power, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
## Plot 2
plot(finalData$settime, finalData$Global_active_power, type="l", col="black", xlab="", ylab="Global Active Power (kilowatts)")
columnlines <- c("black", "red", "blue")
labels <- c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(finalData$settime, finalData$Sub_metering_1, type="l", col=columnlines[1], xlab="", ylab="Energy sub metering")
lines(finalData$settime, finalData$Sub_metering_2, col=columnlines[2])
lines(finalData$settime, finalData$Sub_metering_3, col=columnlines[3])
legend("topright", legend=labels, col=columnlines, lty="solid")
labels <- c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
columnlines <- c("black","red","blue")
par(mfrow=c(2,2))
plot(finalData$settime, finalData$Global_active_power, type="l", col="green", xlab="", ylab="Global Active Power")
plot(finalData$settime, finalData$Voltage, type="l", col="orange", xlab="datetime", ylab="Voltage")
plot(finalData$settime, finalData$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(finalData$settime, finalData$Sub_metering_2, type="l", col="red")
lines(finalData$settime, finalData$Sub_metering_3, type="l", col="blue")
legend("topright", bty="n", legend=labels, lty=1, col=columnlines)
plot(finalData$settime, finalData$Global_reactive_power, type="l", col="blue", xlab="datetime", ylab="Global_reactive_power")
